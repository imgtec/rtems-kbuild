# include $(top_srcdir)/automake/multilib.am
# include $(top_srcdir)/automake/compile.am
# 
# SUBDIRS = cpu
# 
# ## include
# 
# include_sysdir = $(includedir)/sys
# 
# include_sys_HEADERS =
# include_sys_HEADERS += include/sys/_ffcounter.h
# include_sys_HEADERS += include/sys/timeffc.h
# include_sys_HEADERS += include/sys/timepps.h
# include_sys_HEADERS += include/sys/timetc.h
# include_sys_HEADERS += include/sys/timex.h
# 
# include_rtemsdir = $(includedir)/rtems
# 
# include_rtems_HEADERS =
# include_rtems_HEADERS += include/rtems/linkersets.h
# include_rtems_HEADERS += include/rtems/sysinit.h
# include_rtems_HEADERS += include/rtems/system.h
# include_rtems_HEADERS += include/rtems/seterr.h
# 
# include_rtems_scoredir = $(includedir)/rtems/score
# 
# include_rtems_score_HEADERS = include/rtems/score/address.h
# include_rtems_score_HEADERS += include/rtems/score/apimutex.h
# include_rtems_score_HEADERS += include/rtems/score/assert.h
# include_rtems_score_HEADERS += include/rtems/score/atomic.h
# include_rtems_score_HEADERS += include/rtems/score/chain.h
# include_rtems_score_HEADERS += include/rtems/score/chainimpl.h
# include_rtems_score_HEADERS += include/rtems/score/context.h
# include_rtems_score_HEADERS += include/rtems/score/copyrt.h
# include_rtems_score_HEADERS += include/rtems/score/corebarrier.h
# include_rtems_score_HEADERS += include/rtems/score/corebarrierimpl.h
# include_rtems_score_HEADERS += include/rtems/score/coremsg.h
# include_rtems_score_HEADERS += include/rtems/score/coremsgimpl.h
# include_rtems_score_HEADERS += include/rtems/score/coremutex.h
# include_rtems_score_HEADERS += include/rtems/score/coremuteximpl.h
# include_rtems_score_HEADERS += include/rtems/score/coresem.h
# include_rtems_score_HEADERS += include/rtems/score/coresemimpl.h
# include_rtems_score_HEADERS += include/rtems/score/cpuset.h
# include_rtems_score_HEADERS += include/rtems/score/cpusetimpl.h
# include_rtems_score_HEADERS += include/rtems/score/cpustdatomic.h
# include_rtems_score_HEADERS += include/rtems/score/heap.h
# include_rtems_score_HEADERS += include/rtems/score/heapimpl.h
# include_rtems_score_HEADERS += include/rtems/score/protectedheap.h
# include_rtems_score_HEADERS += include/rtems/score/interr.h
# include_rtems_score_HEADERS += include/rtems/score/isr.h
# include_rtems_score_HEADERS += include/rtems/score/isrlevel.h
# include_rtems_score_HEADERS += include/rtems/score/isrlock.h
# include_rtems_score_HEADERS += include/rtems/score/freechain.h
# include_rtems_score_HEADERS += include/rtems/score/mrsp.h
# include_rtems_score_HEADERS += include/rtems/score/mrspimpl.h
# include_rtems_score_HEADERS += include/rtems/score/object.h
# include_rtems_score_HEADERS += include/rtems/score/objectimpl.h
# include_rtems_score_HEADERS += include/rtems/score/onceimpl.h
# include_rtems_score_HEADERS += include/rtems/score/percpu.h
# include_rtems_score_HEADERS += include/rtems/score/priority.h
# include_rtems_score_HEADERS += include/rtems/score/prioritybitmap.h
# include_rtems_score_HEADERS += include/rtems/score/prioritybitmapimpl.h
# include_rtems_score_HEADERS += include/rtems/score/profiling.h
# include_rtems_score_HEADERS += include/rtems/score/processormask.h
# include_rtems_score_HEADERS += include/rtems/score/rbtree.h
# include_rtems_score_HEADERS += include/rtems/score/rbtreeimpl.h
# include_rtems_score_HEADERS += include/rtems/score/resource.h
# include_rtems_score_HEADERS += include/rtems/score/resourceimpl.h
# include_rtems_score_HEADERS += include/rtems/score/scheduler.h
# include_rtems_score_HEADERS += include/rtems/score/schedulerimpl.h
# include_rtems_score_HEADERS += include/rtems/score/schedulercbs.h
# include_rtems_score_HEADERS += include/rtems/score/schedulercbsimpl.h
# include_rtems_score_HEADERS += include/rtems/score/scheduleredf.h
# include_rtems_score_HEADERS += include/rtems/score/scheduleredfimpl.h
# include_rtems_score_HEADERS += include/rtems/score/schedulerpriority.h
# include_rtems_score_HEADERS += include/rtems/score/schedulerpriorityimpl.h
# include_rtems_score_HEADERS += include/rtems/score/schedulerprioritysmp.h
# include_rtems_score_HEADERS += include/rtems/score/schedulersimple.h
# include_rtems_score_HEADERS += include/rtems/score/schedulersimpleimpl.h
# include_rtems_score_HEADERS += include/rtems/score/schedulersmp.h
# include_rtems_score_HEADERS += include/rtems/score/schedulersmpimpl.h
# include_rtems_score_HEADERS += include/rtems/score/smp.h
# include_rtems_score_HEADERS += include/rtems/score/smpbarrier.h
# include_rtems_score_HEADERS += include/rtems/score/smplock.h
# include_rtems_score_HEADERS += include/rtems/score/smpimpl.h
# include_rtems_score_HEADERS += include/rtems/score/stack.h
# include_rtems_score_HEADERS += include/rtems/score/stackimpl.h
# include_rtems_score_HEADERS += include/rtems/score/states.h
# include_rtems_score_HEADERS += include/rtems/score/statesimpl.h
# include_rtems_score_HEADERS += include/rtems/score/sysstate.h
# include_rtems_score_HEADERS += include/rtems/score/thread.h
# include_rtems_score_HEADERS += include/rtems/score/threadimpl.h
# include_rtems_score_HEADERS += include/rtems/score/threaddispatch.h
# include_rtems_score_HEADERS += include/rtems/score/threadq.h
# include_rtems_score_HEADERS += include/rtems/score/threadqimpl.h
# include_rtems_score_HEADERS += include/rtems/score/timespec.h
# include_rtems_score_HEADERS += include/rtems/score/timestamp.h
# include_rtems_score_HEADERS += include/rtems/score/timecounter.h
# include_rtems_score_HEADERS += include/rtems/score/timecounterimpl.h
# include_rtems_score_HEADERS += include/rtems/score/tls.h
# include_rtems_score_HEADERS += include/rtems/score/tod.h
# include_rtems_score_HEADERS += include/rtems/score/todimpl.h
# include_rtems_score_HEADERS += include/rtems/score/userext.h
# include_rtems_score_HEADERS += include/rtems/score/userextimpl.h
# include_rtems_score_HEADERS += include/rtems/score/watchdog.h
# include_rtems_score_HEADERS += include/rtems/score/watchdogimpl.h
# include_rtems_score_HEADERS += include/rtems/score/wkspace.h
# include_rtems_score_HEADERS += include/rtems/score/cpuopts.h
# include_rtems_score_HEADERS += include/rtems/score/basedefs.h
# 
# if HAS_PTHREADS
# include_rtems_score_HEADERS += include/rtems/score/corespinlock.h
# include_rtems_score_HEADERS += include/rtems/score/corespinlockimpl.h
# include_rtems_score_HEADERS += include/rtems/score/corerwlock.h
# include_rtems_score_HEADERS += include/rtems/score/corerwlockimpl.h
# endif
# 
# if HAS_MP
# # We only build multiprocessing related files if HAS_MP was defined
# include_rtems_score_HEADERS += include/rtems/score/mpci.h
# include_rtems_score_HEADERS += include/rtems/score/mpciimpl.h
# include_rtems_score_HEADERS += include/rtems/score/mppkt.h
# include_rtems_score_HEADERS += include/rtems/score/objectmp.h
# include_rtems_score_HEADERS += include/rtems/score/threadmp.h
# endif
# 
# if HAS_SMP
# include_rtems_score_HEADERS += include/rtems/score/schedulerprioritysmpimpl.h
# include_rtems_score_HEADERS += include/rtems/score/schedulerpriorityaffinitysmp.h
# include_rtems_score_HEADERS += include/rtems/score/schedulersimplesmp.h
# endif
# 
# ## src
# 
# noinst_LIBRARIES = libscore.a
# libscore_a_SOURCES =
# libscore_a_CPPFLAGS = $(AM_CPPFLAGS)
# 
# # We only build multiprocessing related files if HAS_MP was defined
# if HAS_MP
# libscore_a_SOURCES += src/mpci.c src/objectmp.c src/threadmp.c
# endif
CONFIG_HAS_SMP := n
ifeq ($(CONFIG_HAS_SMP), y)
obj-y += mpci.o objectmp.o threadmp.o
endif

# 
# if HAS_SMP
# libscore_a_SOURCES += src/percpustatewait.c
# libscore_a_SOURCES += src/profilingsmplock.c
# libscore_a_SOURCES += src/schedulerchangeroot.c
# libscore_a_SOURCES += src/schedulerpriorityaffinitysmp.c
# libscore_a_SOURCES += src/schedulerprioritysmp.c
# libscore_a_SOURCES += src/schedulersimplesmp.c
# libscore_a_SOURCES += src/schedulersmpdebug.c
# libscore_a_SOURCES += src/smp.c
# libscore_a_SOURCES += src/smplock.c
# libscore_a_SOURCES += src/smpmulticastaction.c
# libscore_a_SOURCES += src/cpuset.c
# libscore_a_SOURCES += src/cpusetprintsupport.c
# libscore_a_SOURCES += src/schedulerdefaultaskforhelp.c
# libscore_a_SOURCES += src/schedulerdefaultgetaffinity.c
# libscore_a_SOURCES += src/schedulerdefaultsetaffinity.c
# libscore_a_SOURCES += src/schedulersmpstartidle.c
# endif
ifeq ($(CONFIG_HAS_SMP), y)
obj-y += percpustatewait.o
obj-y += profilingsmplock.o
obj-y += schedulerchangeroot.o
obj-y += schedulerpriorityaffinitysmp.o
obj-y += schedulerprioritysmp.o
obj-y += schedulersimplesmp.o
obj-y += schedulersmpdebug.o
obj-y += smp.o
obj-y += smplock.o
obj-y += smpmulticastaction.o
obj-y += cpuset.o
obj-y += cpusetprintsupport.o
obj-y += schedulerdefaultaskforhelp.o
obj-y += schedulerdefaultgetaffinity.o
obj-y += schedulerdefaultsetaffinity.o
obj-y += schedulersmpstartidle.o
endif

# 
# ## CORE_APIMUTEX_C_FILES
# libscore_a_SOURCES += src/apimutex.c \
#     src/apimutexlock.c src/apimutexisowner.c src/apimutexunlock.c
CORE_APIMUTEX_C_FILES := y
obj-$(CONFIG_CORE_APIMUTEX_C_FILES) += libscore_a_SOURCES += apimutex.o
obj-$(CONFIG_CORE_APIMUTEX_C_FILES) += apimutexlock.o apimutexisowner.o apimutexunlock.o

# 
# ## CORE_BARRIER_C_FILES
# libscore_a_SOURCES += src/corebarrier.c src/corebarrierrelease.c \
#     src/corebarrierwait.c
CONFIG_CORE_BARRIER_C_FILES := y
obj-$(CONFIG_CORE_BARRIER_C_FILES) += corebarrier.o corebarrierrelease.o
obj-$(CONFIG_CORE_BARRIER_C_FILES) += corebarrierwait.o

# 
# ## CORE_MESSAGE_QUEUE_C_FILES
# libscore_a_SOURCES += src/coremsg.c src/coremsgbroadcast.c \
#     src/coremsgclose.c src/coremsgflush.c src/coremsgflushwait.c \
#     src/coremsginsert.c src/coremsgseize.c \
#     src/coremsgsubmit.c
CONFIG_CORE_MESSAGE_QUEUE_C_FILES := y
obj-$(CONFIG_CORE_MESSAGE_QUEUE_C_FILES) += coremsg.o coremsgbroadcast.o
obj-$(CONFIG_CORE_MESSAGE_QUEUE_C_FILES) += coremsgclose.o coremsgflush.o coremsgflushwait.o
obj-$(CONFIG_CORE_MESSAGE_QUEUE_C_FILES) += coremsginsert.o coremsgseize.o
obj-$(CONFIG_CORE_MESSAGE_QUEUE_C_FILES) += coremsgsubmit.o

# 
# ## CORE_MUTEX_C_FILES
# libscore_a_SOURCES += src/coremutex.c \
#     src/coremutexseize.c src/coremutexsurrender.c \
#     src/coremutexseizeintr.c
CONFIG_CORE_MUTEX_C_FILES := y
obj-$(CONFIG_CORE_MUTEX_C_FILES) += coremutex.o
obj-$(CONFIG_CORE_MUTEX_C_FILES) += coremutexseize.o coremutexsurrender.o
obj-$(CONFIG_CORE_MUTEX_C_FILES) += coremutexseizeintr.o

# 
# ## CORE_PERCPU_C_FILES
# libscore_a_SOURCES += src/percpu.c
# libscore_a_SOURCES += src/percpuasm.c
CONFIG_CORE_PERCPU_C_FILES := y
obj-$(CONFIG_CORE_PERCPU_C_FILES) += percpu.o
obj-$(CONFIG_CORE_PERCPU_C_FILES) += percpuasm.o

# 
# ## CORE_RWLOCK_C_FILES
# if HAS_PTHREADS
# libscore_a_SOURCES += src/corerwlock.c src/corerwlockobtainread.c \
#     src/corerwlockobtainwrite.c src/corerwlockrelease.c
# endif
CONFIG_HAS_PTHREADS := y
CONFIG_CORE_RWLOCK_C_FILES := y
ifeq ($(CONFIG_HAS_PTHREADS), y)
obj-$(CONFIG_CORE_RWLOCK_C_FILES) += corerwlock.o corerwlockobtainread.o
obj-$(CONFIG_CORE_RWLOCK_C_FILES) += corerwlockobtainwrite.o corerwlockrelease.o
endif

# 
# ## CORE_SEMAPHORE_C_FILES
# libscore_a_SOURCES += src/coresem.c
CONFIG_CORE_SEMAPHORE_C_FILES := y
obj-$(CONFIG_CORE_SEMAPHORE_C_FILES) += coresem.o

# 
# ## CORE_SPINLOCK_C_FILES
# if HAS_PTHREADS
# libscore_a_SOURCES += src/corespinlockrelease.c \
#     src/corespinlockwait.c
# endif
CONFIG_HAS_PTHREADS := y
CONFIG_CORE_SPINLOCK_C_FILES := y
ifeq ($(CONFIG_HAS_PTHREADS), y)
obj-$(CONFIG_CORE_SPINLOCK_C_FILES) += corespinlockrelease.o
obj-$(CONFIG_CORE_SPINLOCK_C_FILES) += corespinlockwait.o
endif

# 
# ## HEAP_C_FILES
# libscore_a_SOURCES += src/heap.c src/heapallocate.c src/heapextend.c \
#     src/heapfree.c src/heapsizeofuserarea.c src/heapwalk.c src/heapgetinfo.c \
#     src/heapgetfreeinfo.c src/heapresizeblock.c src/heapiterate.c \
#     src/heapgreedy.c src/heapnoextend.c
CONFIG_HEAP_C_FILES := y
obj-$(CONFIG_HEAP_C_FILES) += heap.o heapallocate.o heapextend.o
obj-$(CONFIG_HEAP_C_FILES) += heapfree.o heapsizeofuserarea.o heapwalk.o heapgetinfo.o
obj-$(CONFIG_HEAP_C_FILES) += heapgetfreeinfo.o heapresizeblock.o heapiterate.o
obj-$(CONFIG_HEAP_C_FILES) += heapgreedy.o heapnoextend.o

# 
# ## OBJECT_C_FILES
# libscore_a_SOURCES += src/objectallocate.c src/objectclose.c \
#     src/objectextendinformation.c src/objectfree.c src/objectget.c \
#     src/objectgetisr.c src/objectgetnext.c src/objectinitializeinformation.c \
#     src/objectnametoid.c src/objectnametoidstring.c \
#     src/objectshrinkinformation.c src/objectgetnoprotection.c \
#     src/objectidtoname.c src/objectgetnameasstring.c src/objectsetname.c \
#     src/objectgetinfo.c src/objectgetinfoid.c src/objectapimaximumclass.c \
#     src/objectnamespaceremove.c \
#     src/objectactivecount.c
# libscore_a_SOURCES += src/objectgetlocal.c
CONFIG_OBJECT_C_FILES := y
obj-$(CONFIG_OBJECT_C_FILES) += objectallocate.o objectclose.o
obj-$(CONFIG_OBJECT_C_FILES) += objectextendinformation.o objectfree.o objectget.o
obj-$(CONFIG_OBJECT_C_FILES) += objectgetisr.o objectgetnext.o objectinitializeinformation.o
obj-$(CONFIG_OBJECT_C_FILES) += objectnametoid.o objectnametoidstring.o
obj-$(CONFIG_OBJECT_C_FILES) += objectshrinkinformation.o objectgetnoprotection.o
obj-$(CONFIG_OBJECT_C_FILES) += objectidtoname.o objectgetnameasstring.o objectsetname.o
obj-$(CONFIG_OBJECT_C_FILES) += objectgetinfo.o objectgetinfoid.o objectapimaximumclass.o
obj-$(CONFIG_OBJECT_C_FILES) += objectnamespaceremove.o
obj-$(CONFIG_OBJECT_C_FILES) += objectactivecount.o
obj-$(CONFIG_OBJECT_C_FILES) += objectgetlocal.o

# 
# ## SCHEDULER_C_FILES
# libscore_a_SOURCES += src/log2table.c
# libscore_a_SOURCES += src/scheduler.c
# libscore_a_SOURCES += src/schedulergetaffinity.c
# libscore_a_SOURCES += src/schedulersetaffinity.c
# libscore_a_SOURCES += src/schedulerdefaultnodedestroy.c
# libscore_a_SOURCES += src/schedulerdefaultnodeinit.c
# libscore_a_SOURCES += src/schedulerdefaultreleasejob.c
# libscore_a_SOURCES += src/schedulerdefaultschedule.c
# libscore_a_SOURCES += src/schedulerdefaultstartidle.c
# libscore_a_SOURCES += src/schedulerdefaulttick.c
# libscore_a_SOURCES += src/schedulerdefaultupdate.c
CONFIG_SCHEDULER_C_FILES := y
obj-$(CONFIG_SCHEDULER_C_FILES) += log2table.o
obj-$(CONFIG_SCHEDULER_C_FILES) += scheduler.o
obj-$(CONFIG_SCHEDULER_C_FILES) += schedulergetaffinity.o
obj-$(CONFIG_SCHEDULER_C_FILES) += schedulersetaffinity.o
obj-$(CONFIG_SCHEDULER_C_FILES) += schedulerdefaultnodedestroy.o
obj-$(CONFIG_SCHEDULER_C_FILES) += schedulerdefaultnodeinit.o
obj-$(CONFIG_SCHEDULER_C_FILES) += schedulerdefaultreleasejob.o
obj-$(CONFIG_SCHEDULER_C_FILES) += schedulerdefaultschedule.o
obj-$(CONFIG_SCHEDULER_C_FILES) += schedulerdefaultstartidle.o
obj-$(CONFIG_SCHEDULER_C_FILES) += schedulerdefaulttick.o
obj-$(CONFIG_SCHEDULER_C_FILES) += schedulerdefaultupdate.o

# 
# ## SCHEDULERPRIORITY_C_FILES
# libscore_a_SOURCES += src/schedulerpriority.c \
#     src/schedulerpriorityblock.c \
#     src/schedulerprioritychangepriority.c \
#     src/schedulerpriorityprioritycompare.c \
#     src/schedulerpriorityschedule.c \
#     src/schedulerpriorityunblock.c \
#     src/schedulerpriorityupdate.c \
#     src/schedulerpriorityyield.c
CONFIG_SCHEDULERPRIORITY_C_FILES := y
obj-$(CONFIG_SCHEDULERPRIORITY_C_FILES) += schedulerpriority.o
obj-$(CONFIG_SCHEDULERPRIORITY_C_FILES) += schedulerpriorityblock.o
obj-$(CONFIG_SCHEDULERPRIORITY_C_FILES) += schedulerprioritychangepriority.o
obj-$(CONFIG_SCHEDULERPRIORITY_C_FILES) += schedulerpriorityprioritycompare.o
obj-$(CONFIG_SCHEDULERPRIORITY_C_FILES) += schedulerpriorityschedule.o
obj-$(CONFIG_SCHEDULERPRIORITY_C_FILES) += schedulerpriorityunblock.o
obj-$(CONFIG_SCHEDULERPRIORITY_C_FILES) += schedulerpriorityupdate.o
obj-$(CONFIG_SCHEDULERPRIORITY_C_FILES) += schedulerpriorityyield.o

# 
# ## SCHEDULERSIMPLE_C_FILES
# libscore_a_SOURCES += src/schedulersimple.c \
#     src/schedulersimpleblock.c \
#     src/schedulersimplechangepriority.c \
#     src/schedulersimpleschedule.c \
#     src/schedulersimpleunblock.c \
#     src/schedulersimpleyield.c
CONFIG_SCHEDULERSIMPLE_C_FILES := y
obj-$(CONFIG_SCHEDULERSIMPLE_C_FILES) += schedulersimple.o
obj-$(CONFIG_SCHEDULERSIMPLE_C_FILES) += schedulersimpleblock.o
obj-$(CONFIG_SCHEDULERSIMPLE_C_FILES) += schedulersimplechangepriority.o
obj-$(CONFIG_SCHEDULERSIMPLE_C_FILES) += schedulersimpleschedule.o
obj-$(CONFIG_SCHEDULERSIMPLE_C_FILES) += schedulersimpleunblock.o
obj-$(CONFIG_SCHEDULERSIMPLE_C_FILES) += schedulersimpleyield.o

# 
# ## SCHEDULEREDF_C_FILES
# libscore_a_SOURCES += src/scheduleredf.c \
#     src/scheduleredfnodeinit.c \
#     src/scheduleredfblock.c \
#     src/scheduleredfchangepriority.c \
#     src/scheduleredfprioritycompare.c \
#     src/scheduleredfreleasejob.c \
#     src/scheduleredfschedule.c \
#     src/scheduleredfunblock.c \
#     src/scheduleredfupdate.c \
#     src/scheduleredfyield.c
CONFIG_SCHEDULEREDF_C_FILES := y
obj-$(CONFIG_SCHEDULEREDF_C_FILES) += scheduleredf.o
obj-$(CONFIG_SCHEDULEREDF_C_FILES) += scheduleredfnodeinit.o
obj-$(CONFIG_SCHEDULEREDF_C_FILES) += scheduleredfblock.o
obj-$(CONFIG_SCHEDULEREDF_C_FILES) += scheduleredfchangepriority.o
obj-$(CONFIG_SCHEDULEREDF_C_FILES) += scheduleredfprioritycompare.o
obj-$(CONFIG_SCHEDULEREDF_C_FILES) += scheduleredfreleasejob.o
obj-$(CONFIG_SCHEDULEREDF_C_FILES) += scheduleredfschedule.o
obj-$(CONFIG_SCHEDULEREDF_C_FILES) += scheduleredfunblock.o
obj-$(CONFIG_SCHEDULEREDF_C_FILES) += scheduleredfupdate.o
obj-$(CONFIG_SCHEDULEREDF_C_FILES) += scheduleredfyield.o

# 
# ## SCHEDULERCBS_C_FILES
# libscore_a_SOURCES += src/schedulercbs.c \
#     src/schedulercbsnodeinit.c \
#     src/schedulercbsattachthread.c \
#     src/schedulercbscleanup.c \
#     src/schedulercbscreateserver.c \
#     src/schedulercbsdestroyserver.c \
#     src/schedulercbsdetachthread.c \
#     src/schedulercbsgetapprovedbudget.c \
#     src/schedulercbsgetexecutiontime.c \
#     src/schedulercbsgetparameters.c \
#     src/schedulercbsgetremainingbudget.c \
#     src/schedulercbsgetserverid.c \
#     src/schedulercbssetparameters.c \
#     src/schedulercbsreleasejob.c \
#     src/schedulercbsunblock.c
CONFIG_SCHEDULERCBS_C_FILES := y
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbs.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbsnodeinit.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbsattachthread.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbscleanup.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbscreateserver.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbsdestroyserver.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbsdetachthread.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbsgetapprovedbudget.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbsgetexecutiontime.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbsgetparameters.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbsgetremainingbudget.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbsgetserverid.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbssetparameters.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbsreleasejob.o
obj-$(CONFIG_SCHEDULERCBS_C_FILES) += schedulercbsunblock.o

# 
# ## PROTECTED_HEAP_C_FILES
# libscore_a_SOURCES += src/pheapallocate.c \
#     src/pheapextend.c src/pheapfree.c src/pheapgetsize.c \
#     src/pheapgetblocksize.c src/pheapgetfreeinfo.c src/pheapgetinfo.c \
#     src/pheapinit.c src/pheapresizeblock.c src/pheapwalk.c src/pheapiterate.c
CONFIG_PROTECTED_HEAP_C_FILES := y
obj-$(CONFIG_PROTECTED_HEAP_C_FILES) += pheapallocate.o
obj-$(CONFIG_PROTECTED_HEAP_C_FILES) += pheapextend.o pheapfree.o pheapgetsize.o
obj-$(CONFIG_PROTECTED_HEAP_C_FILES) += pheapgetblocksize.o pheapgetfreeinfo.o pheapgetinfo.o
obj-$(CONFIG_PROTECTED_HEAP_C_FILES) += pheapinit.o pheapresizeblock.o pheapwalk.o pheapiterate.o

# 
# ## FREECHAIN_C_FILES
# libscore_a_SOURCES += src/freechain.c
CONFIG_FREECHAIN_C_FILES := y
obj-$(CONFIG_FREECHAIN_C_FILES) += freechain.o

# 
# ## RBTREE_C_FILES
# libscore_a_SOURCES += \
#     src/rbtreeextract.c src/rbtreefind.c \
#     src/rbtreeinsert.c src/rbtreeiterate.c src/rbtreenext.c
# libscore_a_SOURCES += src/rbtreereplace.c
CONFIG_RBTREE_C_FILES := y
obj-$(CONFIG_RBTREE_C_FILES) += rbtreeextract.o rbtreefind.o
obj-$(CONFIG_RBTREE_C_FILES) += rbtreeinsert.o rbtreeiterate.o rbtreenext.o
obj-$(CONFIG_RBTREE_C_FILES) += rbtreereplace.o

# 
# ## THREAD_C_FILES
# libscore_a_SOURCES += src/thread.c src/threadchangepriority.c \
#     src/threadclearstate.c src/threadcreateidle.c \
#     src/threaddispatch.c \
#     src/threadenabledispatch.c src/threaddisabledispatch.c \
#     src/threadget.c src/threadhandler.c src/threadinitialize.c \
#     src/threadloadenv.c \
#     src/threadrestart.c src/threadsetpriority.c \
#     src/threadsetstate.c \
#     src/threadstackallocate.c src/threadstackfree.c src/threadstart.c \
#     src/threadstartmultitasking.c src/iterateoverthreads.c
# libscore_a_SOURCES += src/threadentryadaptoridle.c
# libscore_a_SOURCES += src/threadentryadaptornumeric.c
# libscore_a_SOURCES += src/threadentryadaptorpointer.c
# libscore_a_SOURCES += src/threadgetcputimeused.c
# libscore_a_SOURCES += src/threadglobalconstruction.c
# libscore_a_SOURCES += src/threadtimeout.c
# libscore_a_SOURCES += src/threadwaitgetid.c
# libscore_a_SOURCES += src/threadyield.c
CONFIG_THREAD_C_FILES := y
obj-$(CONFIG_THREAD_C_FILES) += thread.o threadchangepriority.o
obj-$(CONFIG_THREAD_C_FILES) += threadclearstate.o threadcreateidle.o
obj-$(CONFIG_THREAD_C_FILES) += threaddispatch.o
obj-$(CONFIG_THREAD_C_FILES) += threadenabledispatch.o threaddisabledispatch.o
obj-$(CONFIG_THREAD_C_FILES) += threadget.o threadhandler.o threadinitialize.o
obj-$(CONFIG_THREAD_C_FILES) += threadloadenv.o
obj-$(CONFIG_THREAD_C_FILES) += threadrestart.o threadsetpriority.o
obj-$(CONFIG_THREAD_C_FILES) += threadsetstate.o
obj-$(CONFIG_THREAD_C_FILES) += threadstackallocate.o threadstackfree.o threadstart.o
obj-$(CONFIG_THREAD_C_FILES) += threadstartmultitasking.o iterateoverthreads.o
obj-$(CONFIG_THREAD_C_FILES) += threadentryadaptoridle.o
obj-$(CONFIG_THREAD_C_FILES) += threadentryadaptornumeric.o
obj-$(CONFIG_THREAD_C_FILES) += threadentryadaptorpointer.o
obj-$(CONFIG_THREAD_C_FILES) += threadgetcputimeused.o
obj-$(CONFIG_THREAD_C_FILES) += threadglobalconstruction.o
obj-$(CONFIG_THREAD_C_FILES) += threadtimeout.o
obj-$(CONFIG_THREAD_C_FILES) += threadwaitgetid.o
obj-$(CONFIG_THREAD_C_FILES) += threadyield.o

# 
# if HAS_SMP
# libscore_a_SOURCES += src/threaddispatchdisablelevel.c
# endif
ifeq ($(CONFIG_HAS_SMP), y)
obj-y += threaddispatchdisablelevel.o
endif

# 
# ## THREADQ_C_FILES
# libscore_a_SOURCES += src/threadq.c \
#     src/threadqenqueue.c \
#     src/threadqextractwithproxy.c src/threadqfirst.c \
#     src/threadqflush.c
# libscore_a_SOURCES += src/threadqops.c
CONFIG_THREADQ_C_FILES := y
obj-$(CONFIG_THREADQ_C_FILES) += threadq.o
obj-$(CONFIG_THREADQ_C_FILES) += threadqenqueue.o
obj-$(CONFIG_THREADQ_C_FILES) += threadqextractwithproxy.o threadqfirst.o
obj-$(CONFIG_THREADQ_C_FILES) += threadqflush.o
obj-$(CONFIG_THREADQ_C_FILES) += threadqops.o

# 
# ## TIMESPEC_C_FILES
# libscore_a_SOURCES += src/timespecaddto.c src/timespecfromticks.c \
#     src/timespecisvalid.c src/timespeclessthan.c \
#     src/timespecsubtract.c src/timespectoticks.c src/timespecdivide.c \
#     src/timespecdividebyinteger.c src/timespecgetasnanoseconds.c
CONFIG_TIMESPEC_C_FILES := y
obj-$(CONFIG_TIMESPEC_C_FILES) += timespecaddto.o timespecfromticks.o
obj-$(CONFIG_TIMESPEC_C_FILES) += timespecisvalid.o timespeclessthan.o
obj-$(CONFIG_TIMESPEC_C_FILES) += timespecsubtract.o timespectoticks.o timespecdivide.o
obj-$(CONFIG_TIMESPEC_C_FILES) += timespecdividebyinteger.o timespecgetasnanoseconds.o



# 
# ## TOD_C_FILES
# libscore_a_SOURCES += src/coretod.c src/coretodset.c \
#     src/coretodtickspersec.c \
#     src/coretodadjust.c
# libscore_a_SOURCES += src/coretodabsolutetimeout.c
CONFIG_TOD_C_FILES := y
obj-$(CONFIG_TOD_C_FILES) += coretod.o coretodset.o
obj-$(CONFIG_TOD_C_FILES) += coretodtickspersec.o
obj-$(CONFIG_TOD_C_FILES) += coretodadjust.o
obj-$(CONFIG_TOD_C_FILES) += coretodabsolutetimeout.o

# 
# ## WATCHDOG_C_FILES
# libscore_a_SOURCES += src/watchdoginsert.c
# libscore_a_SOURCES += src/watchdogremove.c
# libscore_a_SOURCES += src/watchdogtick.c
# libscore_a_SOURCES += src/watchdogtickssinceboot.c
CONFIG_WATCHDOG_C_FILES := y
obj-$(CONFIG_WATCHDOG_C_FILES) += watchdoginsert.o
obj-$(CONFIG_WATCHDOG_C_FILES) += watchdogremove.o
obj-$(CONFIG_WATCHDOG_C_FILES) += watchdogtick.o
obj-$(CONFIG_WATCHDOG_C_FILES) += watchdogtickssinceboot.o

# 
# ## USEREXT_C_FILES
# libscore_a_SOURCES += src/userextaddset.c \
#     src/userext.c src/userextremoveset.c src/userextiterate.c
CONFIG_USEREXT_C_FILES := y
obj-$(CONFIG_USEREXT_C_FILES) += userextaddset.o
obj-$(CONFIG_USEREXT_C_FILES) += userext.o userextremoveset.o userextiterate.o



# 
# ## STD_C_FILES
# libscore_a_SOURCES += src/chain.c \
#     src/chainnodecount.c \
#     src/debugisthreaddispatchingallowed.c \
#     src/interr.c src/isr.c src/wkspace.c src/wkstringduplicate.c
# libscore_a_SOURCES += src/isrisinprogress.c
# libscore_a_SOURCES += src/condition.c
# libscore_a_SOURCES += src/debugisownerofallocator.c
# libscore_a_SOURCES += src/futex.c
# libscore_a_SOURCES += src/profilingisrentryexit.c
# libscore_a_SOURCES += src/mutex.c
# libscore_a_SOURCES += src/once.c
# libscore_a_SOURCES += src/resourceiterate.c
# libscore_a_SOURCES += src/sched.c
# libscore_a_SOURCES += src/semaphore.c
# libscore_a_SOURCES += src/smpbarrierwait.c
# libscore_a_SOURCES += src/kern_tc.c

CONFIG_STD_C_FILES := y
obj-$(CONFIG_STD_C_FILES) += chain.o
obj-$(CONFIG_STD_C_FILES) += chainnodecount.o
obj-$(CONFIG_STD_C_FILES) += debugisthreaddispatchingallowed.o
obj-$(CONFIG_STD_C_FILES) += interr.o isr.o wkspace.o wkstringduplicate.o
obj-$(CONFIG_STD_C_FILES) += isrisinprogress.o
obj-$(CONFIG_STD_C_FILES) += condition.o
obj-$(CONFIG_STD_C_FILES) += debugisownerofallocator.o
obj-$(CONFIG_STD_C_FILES) += futex.o
obj-$(CONFIG_STD_C_FILES) += profilingisrentryexit.o
obj-$(CONFIG_STD_C_FILES) += mutex.o
obj-$(CONFIG_STD_C_FILES) += once.o
obj-$(CONFIG_STD_C_FILES) += resourceiterate.o
obj-$(CONFIG_STD_C_FILES) += sched.o
obj-$(CONFIG_STD_C_FILES) += semaphore.o
obj-$(CONFIG_STD_C_FILES) += smpbarrierwait.o
obj-$(CONFIG_STD_C_FILES) += kern_tc.o



# 
# EXTRA_DIST = src/Unlimited.txt
# 
# DISTCLEANFILES = include/rtems/score/cpuopts.h
# 
# include $(srcdir)/preinstall.am
# include $(top_srcdir)/automake/subdirs.am
# include $(top_srcdir)/automake/local.am
# 